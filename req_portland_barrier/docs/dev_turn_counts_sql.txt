select * from replica-customer._d48ded622e745d9120443120b79c81a0aee797b2.anon540fe727280dbc5ecbcb1defa28966ac6ee0bd867e3dd2ebca1f032288ecd8d2 limit 20;

create or replace temp table temp_pre_pivot as
select * 
,ROW_NUMBER ()
    OVER (PARTITION BY activity_id order by index) AS row_index
from replica-customer._d48ded622e745d9120443120b79c81a0aee797b2.anon540fe727280dbc5ecbcb1defa28966ac6ee0bd867e3dd2ebca1f032288ecd8d2
inner join 
where 1=1 
and network_link_ids_unnested in (select stableEdgeId from ((select * from replica-customer._d48ded622e745d9120443120b79c81a0aee797b2.anonev_4_C9EVWAOUo7raeQ_tDTLDovo_XEB1cwoxMHBfdIUB8) union all (select * from replica-customer._d48ded622e745d9120443120b79c81a0aee797b2.anonev_c4rmeZhru9aDvSnrtpSVra0WC4qccAG8R3wQo8rmXv4)));


create or replace temp table temp_pre_pivot as
select thru.* 
,ROW_NUMBER ()
    OVER (PARTITION BY thru.activity_id order by thru.index) AS act_row_index
,ROW_NUMBER ()
    OVER (PARTITION BY thru.activity_id, big_net.intersection_name order by thru.index) AS int_row_index
,big_net.intersection_name
from replica-customer._d48ded622e745d9120443120b79c81a0aee797b2.anon4fd105bdd6d9ec5d2f4c06f0a3736fdfb788e7755aef2edda60d6d4e7d7f4f9c thru
inner join (select stableEdgeId, intersection_name from (
(select * from replica-customer._d48ded622e745d9120443120b79c81a0aee797b2.anonev_PuIwwzdnTUMW6y1LA9Rp_NZi4jJXkn36JM84XFlOJHE) union all (select * from replica-customer._d48ded622e745d9120443120b79c81a0aee797b2.anonev_i0_WgdPdNK_Odmg5YDEDejD7Gdv4veQhEM_mGij8l1s)
)
) big_net on big_net.stableEdgeId = thru.network_link_ids_unnested;

create or replace temp table index_mult_int as
select count(*) as count , activity_id from
(select distinct activity_id,  intersection_name
from temp_pre_pivot ) group by activity_id;
order by count desc 

select * 
from temp_pre_pivot 
where activity_id = '4608095374466946019'
order by activity_id, act_row_index


--this is the table that the counts throught mult and just counts would come from I think
create or replace temp table temp_intersection as
select *, max(index_lead)
OVER (PARTITION BY activity_id) as index_lead_check from 
(
select *
--,lead(network_link_ids_unnested, 1) 
--OVER (PARTITION BY activity_id order by act_row_index) as link_2 --this might not be needed since i really want the first and last links in an intersection 
,index-(lag(index, 1) 
OVER (PARTITION BY activity_id order by act_row_index)) as index_lead
from temp_pre_pivot 
--where activity_id = '4608095374466946019'
)
order by activity_id, act_row_index;


--AGG--aggregates all the locations through two intersections - this is one product from above 
--if you want counts through multiple intersections that has to be an input 
--im not includeing that here but it is required 
select 
intersection_name as first_intersection
,network_link_ids_unnested as first_link
,last_intersection
,last_link 
,count(*) as count
from 
(select * 
,LAST_VALUE(network_link_ids_unnested) 
  OVER (PARTITION BY activity_id ORDER BY act_row_index
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_link
,LAST_VALUE(intersection_name) 
  OVER (PARTITION BY activity_id ORDER BY act_row_index
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_intersection
from temp_intersection
where 1=1 
and activity_id in (select activity_id from index_mult_int where count = 2)
and index_lead_check = 1)
where act_row_index = 1
group by intersection_name, network_link_ids_unnested, last_intersection, last_link



--gets all links for different start stop link pairs - for the st_union and vis
select
DISTINCT
first_link
,first_intersection
,last_link
,last_intersection
,act_row_index
,int_row_index
,network_link_ids_unnested
,intersection_name
from 
(select * 
,FIRST_VALUE(network_link_ids_unnested) 
  OVER (PARTITION BY activity_id ORDER BY act_row_index
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as first_link
,FIRST_VALUE(intersection_name) 
  OVER (PARTITION BY activity_id ORDER BY act_row_index
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as first_intersection
,LAST_VALUE(network_link_ids_unnested) 
  OVER (PARTITION BY activity_id ORDER BY act_row_index
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_link
,LAST_VALUE(intersection_name) 
  OVER (PARTITION BY activity_id ORDER BY act_row_index
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_intersection
from temp_intersection
where 1=1 
and activity_id in (select activity_id from index_mult_int where count = 2)
and index_lead_check = 1)















